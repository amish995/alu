/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input [23:0] io_dip,
    output reg [23:0] io_led
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [8-1:0] M_add_s;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  wire [1-1:0] M_add_z;
  reg [8-1:0] M_add_a;
  reg [8-1:0] M_add_b;
  reg [6-1:0] M_add_alufn;
  adder_2 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .s(M_add_s),
    .v(M_add_v),
    .n(M_add_n),
    .z(M_add_z)
  );
  
  wire [8-1:0] M_shift_shift;
  reg [8-1:0] M_shift_a;
  reg [8-1:0] M_shift_b;
  reg [6-1:0] M_shift_alufn;
  shifter_3 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .shift(M_shift_shift)
  );
  
  wire [8-1:0] M_comp_comp;
  reg [6-1:0] M_comp_alufn;
  reg [1-1:0] M_comp_z;
  reg [1-1:0] M_comp_v;
  reg [1-1:0] M_comp_n;
  comparator_4 comp (
    .alufn(M_comp_alufn),
    .z(M_comp_z),
    .v(M_comp_v),
    .n(M_comp_n),
    .comp(M_comp_comp)
  );
  
  wire [8-1:0] M_bool_bool;
  reg [8-1:0] M_bool_a;
  reg [8-1:0] M_bool_b;
  reg [6-1:0] M_bool_alufn;
  boolean_5 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn(M_bool_alufn),
    .bool(M_bool_bool)
  );
  
  always @* begin
    io_led[0+23-:24] = 1'h0;
    M_add_a = 1'h0;
    M_add_b = 1'h0;
    M_add_alufn = 1'h0;
    M_shift_a = 1'h0;
    M_shift_b = 1'h0;
    M_shift_alufn = 1'h0;
    M_comp_n = 1'h0;
    M_comp_z = 1'h0;
    M_comp_v = 1'h0;
    M_comp_alufn = 1'h0;
    M_bool_alufn = 1'h0;
    M_bool_a = 1'h0;
    M_bool_b = 1'h0;
    
    case (io_dip[6+1-:2])
      2'h0: begin
        M_add_a = io_dip[16+7-:8];
        M_add_b = io_dip[8+7-:8];
        M_add_alufn = io_dip[2+5-:6];
        io_led[8+7-:8] = M_add_s;
        io_led[7+0-:1] = M_add_z;
        io_led[6+0-:1] = M_add_v;
        io_led[5+0-:1] = M_add_n;
      end
      2'h1: begin
        M_bool_a = io_dip[16+7-:8];
        M_bool_b = io_dip[8+7-:8];
        M_bool_alufn = io_dip[2+5-:6];
        io_led[8+7-:8] = M_bool_bool;
      end
      2'h2: begin
        M_shift_a = io_dip[16+7-:8];
        M_shift_b = io_dip[8+7-:8];
        M_shift_alufn = io_dip[2+5-:6];
        io_led[8+7-:8] = M_shift_shift;
      end
      2'h3: begin
        M_add_a = io_dip[16+7-:8];
        M_add_b = io_dip[8+7-:8];
        M_add_alufn = io_dip[2+5-:6];
        io_led[8+7-:8] = M_add_s;
        io_led[7+0-:1] = M_add_z;
        io_led[6+0-:1] = M_add_v;
        io_led[5+0-:1] = M_add_n;
        M_comp_z = M_add_z;
        M_comp_v = M_add_v;
        M_comp_n = M_add_n;
        M_comp_alufn = io_dip[2+5-:6];
        io_led[16+7-:8] = M_comp_comp;
      end
    endcase
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
endmodule
